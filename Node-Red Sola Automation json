[
    {
        "id": "fb3db93b38ecd3eb",
        "type": "tab",
        "label": "GoodSola Automation 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4be272d6d92aa129",
        "type": "switch",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "46245aa401524e91",
                "e05d9f1e0a5c4f46"
            ],
            [
                "e05d9f1e0a5c4f46",
                "46245aa401524e91"
            ]
        ]
    },
    {
        "id": "74189ce2fcde8e81",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Immersion_heater_on",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.immersion_heater_on_r_1f_tp60"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1840,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "13129f5693128725",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Immersion_heater_off",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.immersion_heater_off_r_1f_tp50"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1840,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7a50bd585b3d37e4",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Go",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Go",
        "payloadType": "str",
        "x": 1090,
        "y": 180,
        "wires": [
            [
                "4be272d6d92aa129"
            ]
        ]
    },
    {
        "id": "c7f8580ad6d735b2",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Stop",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Stop",
        "payloadType": "str",
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "4be272d6d92aa129"
            ]
        ]
    },
    {
        "id": "e580aea96b24b58a",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Immersion_heater_off",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.immersion_heater_off_r_1f_tp50"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1620,
        "y": 160,
        "wires": [
            [
                "74189ce2fcde8e81"
            ]
        ]
    },
    {
        "id": "2169abaa8d065f1e",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Immersion_heater_on",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.immersion_heater_on_r_1f_tp60"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1620,
        "y": 240,
        "wires": [
            [
                "13129f5693128725"
            ]
        ]
    },
    {
        "id": "130896af31953fbb",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "debugOn",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 120,
        "wires": []
    },
    {
        "id": "5c04572fcef6127d",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "debugOff",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 300,
        "wires": []
    },
    {
        "id": "e05d9f1e0a5c4f46",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "offOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Go",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 240,
        "wires": [
            [
                "2169abaa8d065f1e",
                "5c04572fcef6127d"
            ]
        ]
    },
    {
        "id": "46245aa401524e91",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "onOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Stop",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 160,
        "wires": [
            [
                "e580aea96b24b58a",
                "130896af31953fbb"
            ]
        ]
    },
    {
        "id": "fbe4e52c346093ce",
        "type": "change",
        "z": "fb3db93b38ecd3eb",
        "name": "cleans all var",
        "rules": [
            {
                "t": "delete",
                "p": "OACurrentRate",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "acPowerUsed",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "autoSpa",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "batteryState",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "batteryState",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "feedin",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "immersionHeaterBoost",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "pvState",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "spaTarget",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "spaTemp",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "time",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "useSpa",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 120,
        "wires": [
            [
                "0e5709d9db1c0af5"
            ]
        ]
    },
    {
        "id": "0e5709d9db1c0af5",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 120,
        "wires": []
    },
    {
        "id": "9dc26d77ad5ff045",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "fbe4e52c346093ce"
            ]
        ]
    },
    {
        "id": "a311f11e75aa62c8",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Bat=90",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "90",
        "payloadType": "num",
        "x": 490,
        "y": 280,
        "wires": [
            [
                "ee7d7ab5350db08a"
            ]
        ]
    },
    {
        "id": "ac26d6cc70013534",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Bat=50",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "50",
        "payloadType": "num",
        "x": 490,
        "y": 360,
        "wires": [
            [
                "ee7d7ab5350db08a"
            ]
        ]
    },
    {
        "id": "ee7d7ab5350db08a",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "batData",
        "func": "flow.set(\"batteryState\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 300,
        "wires": [
            [
                "07029d44652373fe",
                "92aa18dcc3093752",
                "edbb180dad47ebfe",
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "07029d44652373fe",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "testDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 300,
        "wires": []
    },
    {
        "id": "86a8068291a856dc",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "PV<2000",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1999",
        "payloadType": "num",
        "x": 480,
        "y": 220,
        "wires": [
            [
                "e59bb09cde1d4c6d"
            ]
        ]
    },
    {
        "id": "e59bb09cde1d4c6d",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "pvData",
        "func": "flow.set(\"pvState\",msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "563bd40a14a91aef",
                "92aa18dcc3093752",
                "edbb180dad47ebfe",
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "a2d85d1cfa7e36dc",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "PV>=2000",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2001",
        "payloadType": "num",
        "x": 480,
        "y": 180,
        "wires": [
            [
                "e59bb09cde1d4c6d"
            ]
        ]
    },
    {
        "id": "563bd40a14a91aef",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "testPVDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 240,
        "wires": []
    },
    {
        "id": "92aa18dcc3093752",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "immersionFunction",
        "func": "var pvPower=flow.get(\"pvState\");\nvar battery=flow.get(\"batteryState\");\nvar feed = parseInt(flow.get(\"feedin\"));\nvar timeNow=flow.get(\"time\");\nvar OACurrentRate = flow.get(\"OACurrentRate\");\nvar immersionHeaterBoost = flow.get(\"immersionHeaterBoost\");\nvar nestOccupied = flow.get(\"nestOccupied\");\nvar immersionOverUse = flow.get(\"immersionOverUse\");\n\nif (OACurrentRate <= '0' && battery <= '10') {\n    msg.payload = \"Go\";\n    return msg;\n}\nelse if (OACurrentRate <= '10' && battery <= '10' && nestOccupied === \"on\") {\n    msg.payload = \"Go\";\n    return msg;\n}\nelse if (OACurrentRate > '0' && battery > '10') {\n    if (immersionHeaterBoost == \"active\"){\n        msg.payload = \"Go\";\n        return msg;\n    }\n    else {\n        if (immersionOverUse != \"Pause\"){\n//    else if (immersionHeaterBoost != \"active\"){    \n        if (timeNow >= '6' && timeNow <= '12') {\n            if (pvPower >= '2000') {\n                if (battery >= '30') {\n                    if (feed >= -2000) {\n                        msg.payload = \"Go\";\n                        return msg;\n                    }\n                    else {\n                        msg.payload = \"Stop\";\n                        return msg;\n                    }\n                }\n                else if (battery <= '20') {\n                    msg.payload = \"Stop\";\n                    return msg;\n                }\n            }\n            else if (pvPower >= '3000') {\n                if (battery >= '65') {\n                    if (feed >= -2000) {\n                        msg.payload = \"Go\";\n                        return msg;\n                    }\n                    else {\n                        msg.payload = \"Stop\";\n                        return msg;\n                    }\n                }\n                if (battery <= '50') {\n                    msg.payload = \"Stop\";\n                    return msg;\n                    }\n            }\n            else {\n                msg.payload = \"Stop\";\n                return msg;\n            }\n        }\n        else if (timeNow >= '13' && timeNow <= '14' && pvPower >= '2000' && feed >= -2000) {\n            if (battery >= '80'){\n                msg.payload = \"Go\";\n                return msg;\n            }\n            else if (battery <= '60'){\n                msg.payload = \"Stop\";\n                return msg;\n            }\n        }\n        else if (timeNow >= '15' && timeNow <= '19') {\n            if (pvPower >= '2000') {\n                if (battery >= '80') {\n                    if (feed >= -2000) {\n                        msg.payload=\"Go\";\n                        return msg;\n                    }\n                    else {\n                        msg.payload=\"Stop\";\n                        return msg;\n                    }\n                }\n                else if(battery <= '65') {\n                    msg.payload=\"Stop\";\n                    return msg;\n                }\n            }\n            else if (pvPower >= '3000') {\n                if (battery >= '65') {\n                    if (feed >= -2000) {\n                        msg.payload=\"Go\";\n                        return msg;\n                    }\n                    else {\n                        msg.payload=\"Stop\";\n                        return msg;\n                    }\n                }\n                else if (battery <= '50') {\n                    msg.payload=\"Stop\";\n                    return msg;\n                }\n            }\n            else {\n                msg.payload=\"Stop\";\n                return msg;\n            }\n        }\n        else {\n            msg.payload = \"Stop\";\n            return msg;\n        }\n    }\n    }\n}\nelse {\n    msg.payload=\"Stop\";\n    return msg;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 200,
        "wires": [
            [
                "4be272d6d92aa129"
            ]
        ]
    },
    {
        "id": "76bb9cd21ce04222",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Bat=75",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "75",
        "payloadType": "num",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "ee7d7ab5350db08a"
            ]
        ]
    },
    {
        "id": "b05b1a013b35fddd",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "feedin>=5000",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5000",
        "payloadType": "num",
        "x": 470,
        "y": 100,
        "wires": [
            [
                "68279146eb924a04"
            ]
        ]
    },
    {
        "id": "137871247e80c6df",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "feedin<2000",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-2999",
        "payloadType": "num",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "68279146eb924a04"
            ]
        ]
    },
    {
        "id": "68279146eb924a04",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "feedin",
        "func": "flow.set(\"feedin\",msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 120,
        "wires": [
            [
                "92aa18dcc3093752",
                "f9547f731bfdca5a",
                "edbb180dad47ebfe",
                "14a57caecd71b271",
                "da52072829560e75"
            ]
        ]
    },
    {
        "id": "f9547f731bfdca5a",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "testfeedin",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "cf7b180aca61342c",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "Solax acpower",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.solax_acpower",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "num",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 280,
        "y": 420,
        "wires": [
            [
                "da711538f27a2af1",
                "c731d3063ab18606"
            ]
        ]
    },
    {
        "id": "da711538f27a2af1",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "test acpower",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "c731d3063ab18606",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "acData",
        "func": "flow.set(\"tempAcPowerState\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "edbb180dad47ebfe"
            ]
        ]
    },
    {
        "id": "ebaeac2700d6d68a",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "debugAcUsed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 400,
        "wires": []
    },
    {
        "id": "56549d891ebecd67",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "acPower=50",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "50",
        "payloadType": "num",
        "x": 470,
        "y": 440,
        "wires": [
            [
                "c731d3063ab18606"
            ]
        ]
    },
    {
        "id": "ed475e850255b224",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "acPower=81",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "81",
        "payloadType": "num",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "c731d3063ab18606"
            ]
        ]
    },
    {
        "id": "c9989801686195ea",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "time",
        "func": "flow.set(\"time\", Number(msg.payload));\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 560,
        "wires": [
            [
                "92aa18dcc3093752",
                "f68ca66e064ab8df",
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "27dc95101bd6a729",
        "type": "moment",
        "z": "fb3db93b38ecd3eb",
        "name": "Time",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/London",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/London",
        "x": 490,
        "y": 560,
        "wires": [
            [
                "c9989801686195ea"
            ]
        ]
    },
    {
        "id": "5c4a017410537ff6",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 560,
        "wires": [
            [
                "27dc95101bd6a729"
            ]
        ]
    },
    {
        "id": "f68ca66e064ab8df",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "test time",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 560,
        "wires": []
    },
    {
        "id": "de21cfdc9c2f5826",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Bubbles Off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 900,
        "wires": [
            [
                "482614479a4b5cb4"
            ]
        ]
    },
    {
        "id": "a0fdfb4dee0edd6d",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Bubbles On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 840,
        "wires": [
            [
                "2e2b259d64d3b114"
            ]
        ]
    },
    {
        "id": "482614479a4b5cb4",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Bubbles Off",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.spa_bubbles"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1690,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "2e2b259d64d3b114",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Bubbles On",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.spa_bubbles"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1690,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "20f6d2d1352b8f05",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Filter On",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.spa_filter"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1680,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "5a5ec9c82f1c887c",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Filter Off",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.spa_filter"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1680,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "bd697307f77be6e7",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Filter Off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 1020,
        "wires": [
            [
                "5a5ec9c82f1c887c"
            ]
        ]
    },
    {
        "id": "739c0b92c919c2a4",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Filter On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 960,
        "wires": [
            [
                "20f6d2d1352b8f05"
            ]
        ]
    },
    {
        "id": "0ce54c7a704e23a2",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Heat Off",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.spa_thermostat"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1680,
        "y": 1160,
        "wires": [
            [
                "5a5ec9c82f1c887c"
            ]
        ]
    },
    {
        "id": "815f8367d3908c93",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Heat Off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "9fb9cd229f1e5e6d",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "Heat On",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "homeassistant",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.spa_thermostat"
        ],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1680,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "7dd2c9c51bc6905f",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Heat On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "235ba53861fbb416",
        "type": "switch",
        "z": "fb3db93b38ecd3eb",
        "name": "bubbles",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "957b337c3342c088",
                "5db5bc1e93993b48"
            ],
            [
                "957b337c3342c088",
                "5db5bc1e93993b48"
            ]
        ]
    },
    {
        "id": "84683fea82fdf23f",
        "type": "switch",
        "z": "fb3db93b38ecd3eb",
        "name": "filter",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "53ae4d289a04c5ca",
                "ccc74e2aa70f4598"
            ],
            [
                "53ae4d289a04c5ca",
                "ccc74e2aa70f4598"
            ]
        ]
    },
    {
        "id": "01c514d0b1ded6ec",
        "type": "switch",
        "z": "fb3db93b38ecd3eb",
        "name": "Heat",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1000,
        "wires": [
            [
                "923500cb0a81c3b9",
                "6e2d3c8d582df549"
            ],
            [
                "6e2d3c8d582df549",
                "923500cb0a81c3b9"
            ]
        ]
    },
    {
        "id": "5db5bc1e93993b48",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "offOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Go",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 920,
        "wires": [
            [
                "482614479a4b5cb4"
            ]
        ]
    },
    {
        "id": "957b337c3342c088",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "onOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Stop",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 880,
        "wires": [
            [
                "2e2b259d64d3b114"
            ]
        ]
    },
    {
        "id": "53ae4d289a04c5ca",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "onOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Stop",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 960,
        "wires": [
            [
                "20f6d2d1352b8f05"
            ]
        ]
    },
    {
        "id": "ccc74e2aa70f4598",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "offOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Go",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 1000,
        "wires": [
            [
                "5a5ec9c82f1c887c"
            ]
        ]
    },
    {
        "id": "efad56dc099f142d",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Go",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Go",
        "payloadType": "str",
        "x": 850,
        "y": 960,
        "wires": [
            [
                "01c514d0b1ded6ec"
            ]
        ]
    },
    {
        "id": "fb175c2ab824e4d1",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Stop",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Stop",
        "payloadType": "str",
        "x": 850,
        "y": 1040,
        "wires": [
            [
                "01c514d0b1ded6ec"
            ]
        ]
    },
    {
        "id": "6e2d3c8d582df549",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "offOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Go",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 1160,
        "wires": [
            [
                "0ce54c7a704e23a2"
            ]
        ]
    },
    {
        "id": "923500cb0a81c3b9",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "onOnce",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "Stop",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 1120,
        "wires": [
            [
                "9fb9cd229f1e5e6d"
            ]
        ]
    },
    {
        "id": "61de9bae97b342cd",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "useSpa",
        "func": "flow.set(\"useSpa\",msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1060,
        "wires": [
            [
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "e66fcfbdcc1b46df",
        "type": "api-current-state",
        "z": "fb3db93b38ecd3eb",
        "name": "spaThermostat",
        "server": "315411fb.df557e",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "climate.spa_thermostat",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 320,
        "y": 1120,
        "wires": [
            [
                "cd0de887eb15069c",
                "b82b0653ec35053c",
                "b3b9d2e3ceb30528"
            ]
        ]
    },
    {
        "id": "558e489c4c59738c",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "e66fcfbdcc1b46df"
            ]
        ]
    },
    {
        "id": "79cd0b2e3b946642",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "useSpa",
        "func": "flow.set(\"autoSpa\",msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1000,
        "wires": [
            [
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "cd0de887eb15069c",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "spaTemp",
        "func": "flow.set(\"spaTemp\", msg.payload.attributes.current_temperature);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1100,
        "wires": [
            [
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "b82b0653ec35053c",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "spaTarget",
        "func": "flow.set(\"spaTarget\", msg.payload.attributes.temperature);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1140,
        "wires": [
            [
                "01a14ae8aa9f7f80",
                "69cb80f5eb1fa2fa"
            ]
        ]
    },
    {
        "id": "b3b9d2e3ceb30528",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "debug 36",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a19c2daec4badd57",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "OACurrentRate",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 640,
        "wires": []
    },
    {
        "id": "85659c99300c50a4",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "OACurrentRate",
        "func": "flow.set(\"OACurrentRate\", Number(msg.payload));\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 640,
        "wires": [
            [
                "a19c2daec4badd57",
                "92aa18dcc3093752",
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "0a467ee348713d1f",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "useSpa",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.usespa",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "seconds",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 350,
        "y": 1060,
        "wires": [
            [
                "61de9bae97b342cd"
            ]
        ]
    },
    {
        "id": "e75c3f9111772cfb",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "autoSpa",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.autospa",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 340,
        "y": 1000,
        "wires": [
            [
                "79cd0b2e3b946642"
            ]
        ]
    },
    {
        "id": "c15c4dce2ba30358",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "905676d93b109279",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "immersionHeaterBoost",
        "func": "flow.set(\"immersionHeaterBoost\",msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 40,
        "wires": [
            [
                "92aa18dcc3093752",
                "c15c4dce2ba30358"
            ]
        ]
    },
    {
        "id": "e277a20da22e4388",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "immersionHeeterBoost",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "timer.immersion_heater_boost",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "905676d93b109279"
            ]
        ]
    },
    {
        "id": "f73a45fd2ae8e519",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "Solax Battary",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.solax_battery",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "num",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "ee7d7ab5350db08a"
            ]
        ]
    },
    {
        "id": "047f2ccdd1b18506",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "Solax PV power",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.solax_feedinpowerm2",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "num",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "e59bb09cde1d4c6d"
            ]
        ]
    },
    {
        "id": "e89f082a451a3f7b",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "Solax feedinpower",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.solax_feedinpower",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "num",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "68279146eb924a04"
            ]
        ]
    },
    {
        "id": "4848e129e89799e9",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "OACurrentRate",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.octopus_agile_current_rate",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "85659c99300c50a4"
            ]
        ]
    },
    {
        "id": "dcb436a492118aef",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "time>=13",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "13",
        "payloadType": "num",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "c9989801686195ea"
            ]
        ]
    },
    {
        "id": "86619ea2810323ed",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "time>=9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "9",
        "payloadType": "num",
        "x": 260,
        "y": 640,
        "wires": [
            [
                "c9989801686195ea"
            ]
        ]
    },
    {
        "id": "13661523457a446b",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "time>=14",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "14",
        "payloadType": "num",
        "x": 260,
        "y": 480,
        "wires": [
            [
                "c9989801686195ea"
            ]
        ]
    },
    {
        "id": "2d034fe31d112ec5",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "time>=12",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "12",
        "payloadType": "num",
        "x": 260,
        "y": 600,
        "wires": [
            [
                "c9989801686195ea"
            ]
        ]
    },
    {
        "id": "edbb180dad47ebfe",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "acDataUpdater",
        "func": "var pvPower=flow.get(\"pvState\");\nvar feedin=flow.get(\"feedin\");\nvar tempAcPowerState = flow.get(\"tempAcPowerState\");\ncontext.set(\"tempPvPowAcPow\", pvPower + tempAcPowerState);\nvar tempPvPowAcPow = context.get(\"tempPvPowAcPow\");\ncontext.set(\"tempPvPowAcPowfeedin\", tempPvPowAcPow - feedin );\nvar tempPvPowAcPowfeedin = context.get(\"tempPvPowAcPowfeedin\");\n//flow.set(\"acPowerUsage\", pvPower + tempAcPowerState - feedin);\nflow.set(\"acPowerUsageUpdater\", tempPvPowAcPowfeedin);\nmsg.payload = \"acPowerUsageUpdater\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 420,
        "wires": [
            [
                "ebaeac2700d6d68a",
                "c8c6b3f78769c830"
            ]
        ]
    },
    {
        "id": "01a14ae8aa9f7f80",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "spaFunction",
        "func": "var pvPower = flow.get(\"pvState\");\nvar battery = flow.get(\"batteryState\");\nvar feed = parseInt(flow.get (\"feedin\"));\nvar timeNow = flow.get(\"time\");\nvar useSpa = flow.get(\"useSpa\");\nvar autoSpa = flow.get(\"autoSpa\");\nvar spaTemp = flow.get(\"spaTemp\");\nvar spaTarget = flow.get(\"spaTarget\");\nvar OACurrentRate = flow.get(\"OACurrentRate\");\nvar pauseSpa = flow.get(\"pauseSpa\");\nvar acPowerUsage = flow.get(\"acPowerUsageUpdater\");\nvar spaOverUse = flow.get(\"spaOverUse\");\n//var spaTargetTemp = flow.get(\"spaTarget\");\n\n\nif (useSpa === \"on\" && timeNow <= '2') {\n    msg.payload = \"Go\";\n}\nelse if (useSpa === \"on\" && timeNow >= '3' && timeNow <= '7' && OACurrentRate <= '0') {\n    msg.payload = \"Go\";\n}\nelse if (useSpa === \"on\" && timeNow >= '8') {\n    msg.payload = \"Go\";\n}\nelse if (useSpa === \"off\") {\n    if (OACurrentRate <= '0' && battery <= '10') {\n        msg.payload = \"Go\";\n        return msg;\n    }\n    else if (OACurrentRate > '0') {\n        if (autoSpa === \"on\") {\n            if (pauseSpa != \"Pause\" && spaOverUse != \"Pause\"){\n                if (timeNow >= '8' && timeNow <= '9' && pvPower >= '2000' && feed >= -1000 && spaTemp <= spaTarget) {\n                    if (battery >= '80') {\n                        msg.payload = \"Go\";\n                        return msg;\n                    }\n                    else if (battery >= '50') {\n                        msg.payload = \"Stop\";\n                        return msg;\n                    }\n                }\n            if (timeNow >= '10' && timeNow <= '11' && pvPower >= '2000' && feed >= -1000 && spaTemp <= spaTarget) {\n                if (battery >= '30') {\n                    msg.payload = \"Go\";\n                    return msg;\n                }\n                else if (battery >= '20') {\n                    msg.payload = \"Stop\";\n                    return msg;\n                }\n            }\n            if (timeNow >= '12' && timeNow <= '14' && pvPower >= '3000' && feed >= -1000 && spaTemp <= spaTarget) {\n                if (battery >= '40') {\n                    msg.payload = \"Go\";\n                    return msg;\n                    }\n                else if (battery <= '20') {\n                        msg.payload = \"Stop\";\n                        return msg;\n                    }\n            }    \n            else if (timeNow >= '12' && timeNow <= '14' && pvPower >= '2000' && feed >= -1000 && spaTemp <= spaTarget){\n                if (battery >= '65') {\n                    msg.payload = \"Go\";\n                    return msg;\n                }\n                else if (battery <= '50') {\n                    msg.payload = \"Stop\";\n                    return msg;\n                }\n            }\n            else if (timeNow > '14' && timeNow <= '20' && pvPower >= '2000' && feed >= -1000 && spaTemp <= spaTarget) {\n                if (battery >= '80') {\n                    msg.payload = \"Go\";\n                    return msg;\n                }\n                else if (battery <= '64') {\n                        msg.payload = \"Stop\";\n                        return msg;\n                    }\n            }\n            else if (timeNow > '14' && timeNow <= '20' && pvPower >= '3000' && feed >= -1000 && spaTemp <= spaTarget) {\n                    if (battery >= '65') {\n                        msg.payload = \"Go\";\n                        return msg;\n                    }\n                    else if (battery <= '50') {\n                        msg.payload = \"Stop\";\n                        return msg;\n                    }\n            }\n            else {\n                msg.payload = \"Stop\";\n                return msg;\n            }\n            }\n            else if (pauseSpa === \"Pause\") {\n                msg.payload = \"Stop\";\n            }\n            return msg;\n        }\n        else if (autoSpa === \"off\") {\n            msg.payload = \"Stop\";\n        }\n    }\n    else if (useSpa === \"off\") {\n        msg.payload = \"Stop\";\n    }\n}\nelse {\n    msg.payload = \"Stop\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1000,
        "wires": [
            [
                "01c514d0b1ded6ec"
            ]
        ]
    },
    {
        "id": "c8c6b3f78769c830",
        "type": "api-call-service",
        "z": "fb3db93b38ecd3eb",
        "name": "acPowerUsageUpdater",
        "server": "315411fb.df557e",
        "version": 5,
        "debugenabled": false,
        "domain": "input_number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.acpowerusage"
        ],
        "data": "{\"value\":\"{{flow.acPowerUsageUpdater}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "acPowerUsageUpdater",
                "valueType": "flow"
            }
        ],
        "queue": "none",
        "x": 1050,
        "y": 440,
        "wires": [
            [
                "ecad423aa4b5149f"
            ]
        ]
    },
    {
        "id": "ecad423aa4b5149f",
        "type": "debug",
        "z": "fb3db93b38ecd3eb",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 440,
        "wires": []
    },
    {
        "id": "cade2ac1ed4555cc",
        "type": "server-state-changed",
        "z": "fb3db93b38ecd3eb",
        "name": "nestOccupied",
        "server": "315411fb.df557e",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.nestoccupied",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 430,
        "y": 700,
        "wires": [
            [
                "bcf5c03d8b49d93d"
            ]
        ]
    },
    {
        "id": "bcf5c03d8b49d93d",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "nestOccupied",
        "func": "flow.set(\"nestOccupied\",msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 700,
        "wires": [
            [
                "92aa18dcc3093752"
            ]
        ]
    },
    {
        "id": "7bc86166744234c2",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "op1": "",
        "op2": "Go",
        "op1type": "nul",
        "op2type": "str",
        "duration": "45",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "Go",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1030,
        "y": 1160,
        "wires": [
            [
                "01a14ae8aa9f7f80",
                "2f7c5a3627652085"
            ]
        ]
    },
    {
        "id": "69cb80f5eb1fa2fa",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "pauseSpaHeat",
        "func": "var spaTemp = flow.get(\"spaTemp\");\nvar spaTarget = flow.get(\"spaTarget\");\n\nif (spaTemp >= spaTarget){\n    flow.set(\"pauseSpa\", \"Pause\");\n    msg.payload = \"Pause\";\n}\n//else {\n//    flow.set(\"pauseSpa\", \"Go\");\n//    msg.payload = \"Go\";\n//}\n//flow.set(\"pauseSpa\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1160,
        "wires": [
            [
                "ea896f664d0dc807"
            ]
        ]
    },
    {
        "id": "ea896f664d0dc807",
        "type": "switch",
        "z": "fb3db93b38ecd3eb",
        "name": "PauseSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Pause",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 1160,
        "wires": [
            [],
            [
                "7bc86166744234c2"
            ]
        ]
    },
    {
        "id": "92e99a174457b76f",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "Go",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Go",
        "payloadType": "str",
        "x": 870,
        "y": 1200,
        "wires": [
            [
                "7bc86166744234c2"
            ]
        ]
    },
    {
        "id": "2f7c5a3627652085",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "pauseSpaHeatGo",
        "func": "flow.set(\"pauseSpa\", \"Go\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "4bba6738ecfb5a1b",
        "type": "inject",
        "z": "fb3db93b38ecd3eb",
        "name": "PV>=3000",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3001",
        "payloadType": "num",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "e59bb09cde1d4c6d"
            ]
        ]
    },
    {
        "id": "14a57caecd71b271",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "pauseSpaHeat",
        "func": "var feed = parseInt(flow.get(\"feedin\"));\n\nif (feed <= -1000){\n    flow.set(\"spaOverUse\", \"Pause\");\n    msg.payload = \"Pause\";\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 780,
        "wires": [
            [
                "97a3c97dbe7c43e5"
            ]
        ]
    },
    {
        "id": "97a3c97dbe7c43e5",
        "type": "switch",
        "z": "fb3db93b38ecd3eb",
        "name": "spaOverUsePauseSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Pause",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 780,
        "wires": [
            [],
            [
                "221ffe720c5802bd"
            ]
        ]
    },
    {
        "id": "221ffe720c5802bd",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "op1": "",
        "op2": "Go",
        "op1type": "nul",
        "op2type": "str",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "Go",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1270,
        "y": 780,
        "wires": [
            [
                "f0141911eabbd96c"
            ]
        ]
    },
    {
        "id": "f0141911eabbd96c",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "spaOverUseGo",
        "func": "flow.set(\"spaOverUse\", \"Go\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 780,
        "wires": [
            [
                "01a14ae8aa9f7f80"
            ]
        ]
    },
    {
        "id": "da52072829560e75",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "pauseImmersionHeat",
        "func": "var feed = parseInt(flow.get(\"feedin\"));\n\nif (feed <= -1000){\n    flow.set(\"immersionOverUse\", \"Pause\");\n    msg.payload = \"Pause\";\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 740,
        "wires": [
            [
                "a11ed7d289855a36"
            ]
        ]
    },
    {
        "id": "a11ed7d289855a36",
        "type": "switch",
        "z": "fb3db93b38ecd3eb",
        "name": "immersionOverUsePauseSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Pause",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 740,
        "wires": [
            [],
            [
                "4bfc726d69f104d9"
            ]
        ]
    },
    {
        "id": "4bfc726d69f104d9",
        "type": "trigger",
        "z": "fb3db93b38ecd3eb",
        "name": "",
        "op1": "",
        "op2": "Go",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "Go",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1350,
        "y": 740,
        "wires": [
            [
                "91d33683d7a36306"
            ]
        ]
    },
    {
        "id": "91d33683d7a36306",
        "type": "function",
        "z": "fb3db93b38ecd3eb",
        "name": "immersionOverUseGo",
        "func": "flow.set(\"immersionOverUse\", \"Go\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 740,
        "wires": [
            [
                "92aa18dcc3093752"
            ]
        ]
    },
    {
        "id": "315411fb.df557e",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": 30,
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    }
]
